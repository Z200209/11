openapi: 3.0.0
info:
  title: MLZ游戏平台API
  description: |
    MLZ游戏平台的API文档，包含客户端和控制台接口。
    
    ## 认证说明
    ### 客户端接口认证（8080端口）
    客户端接口需要用户登录后获取的签名令牌(sign)进行认证。认证方式有两种：
    1. 在URL参数中添加 `?sign=[sign值]`（推荐方式）
    2. 在请求头中添加 `Authorization: [sign值]`
    
    ### 控制台接口认证（8081端口）
    控制台接口使用Cookie认证，登录后会自动设置以下Cookie：
    - `mlz_console_user`: 用户登录信息
    - `mlz_console_token`: 认证令牌
    
    ## 接口说明
    - 客户端接口：使用8080端口访问，路径以`/game`开头
    - 控制台接口：使用8081端口访问，路径以`/game`开头
  version: 1.0.0
  contact:
    name: MLZ开发团队

servers:
  - url: http://localhost:8080
    description: 本地客户端API开发环境
  - url: http://localhost:8081
    description: 本地控制台API开发环境
  - url: https://api.mlz.example.com
    description: 生产环境

components:
  securitySchemes:
    signAuth:
      type: apiKey
      in: header
      name: Authorization
      description: 客户端接口用户登录后获取的签名令牌
    signParam:
      type: apiKey
      in: query
      name: sign
      description: 客户端接口用户登录后获取的签名令牌（URL参数方式，推荐）
    cookieAuth:
      type: apiKey
      in: cookie
      name: mlz_console_token
      description: 控制台接口认证Cookie

  schemas:
    Response:
      type: object
      properties:
        code:
          type: integer
          enum: [1001, 1002, 4004]
          description: |
            业务状态码：
            - 1001: 成功
            - 1002: 用户未登录
            - 4004: 操作失败/资源不存在
        msg:
          type: string
          description: 状态描述
        data:
          type: object
          description: 响应数据，具体格式根据接口而定
        
    UserInfo:
      type: object
      properties:
        userId:
          type: string
          format: bigint
          description: 用户ID
        name:
          type: string
          description: 用户名称
        phone:
          type: string
          description: 手机号
        avatar:
          type: string
          description: 头像URL
        gender:
          type: integer
          enum: [1, 2]
          description: 性别，1-男，2-女
          
    LoginResponse:
      type: object
      properties:
        sign:
          type: string
          description: 用户签名令牌，用于后续请求认证
        userInfo:
          $ref: '#/components/schemas/UserInfo'
          
    GameInfo:
      type: object
      properties:
        gameId:
          type: string
          format: bigint
          description: 游戏ID
        gameName:
          type: string
          description: 游戏名称
        price:
          type: number
          format: float
          description: 游戏价格
        gameIntroduction:
          type: string
          description: 游戏介绍
        gameDate:
          type: string
          description: 发布日期
        gamePublisher:
          type: string
          description: 发行商
        typeName:
          type: string
          description: 游戏类型名称
        typeImage:
          type: string
          description: 游戏类型图标
        images:
          type: array
          items:
            type: string
          description: 游戏图片列表
          
    ImageVo:
      type: object
      properties:
        src:
          type: string
          description: 图片URL
        ar:
          type: number
          format: float
          description: 图片宽高比
          
    GameListVo:
      type: object
      properties:
        gameId:
          type: string
          format: bigint
          description: 游戏ID
        gameName:
          type: string
          description: 游戏名称
        typeName:
          type: string
          description: 游戏类型名称
        image:
          $ref: '#/components/schemas/ImageVo'
          
    GameListResponse:
      type: object
      properties:
        gameList:
          type: array
          items:
            $ref: '#/components/schemas/GameListVo'
          description: 游戏列表
        wp:
          type: string
          description: 分页标记，用于获取下一页数据
          
    GameWpVo:
      type: object
      properties:
        keyword:
          type: string
          description: 搜索关键词
        typeId:
          type: string
          format: bigint
          description: 游戏类型ID
        page:
          type: integer
          description: 页码
        pageSize:
          type: integer
          description: 每页数量
          
    ChildrenListVO:
      type: object
      properties:
        typeId:
          type: string
          format: bigint
          description: 类型ID
        typeName:
          type: string
          description: 类型名称
        image:
          type: string
          description: 类型图标URL
          
    TypeVO:
      type: object
      properties:
        typeId:
          type: string
          format: bigint
          description: 类型ID
        typeName:
          type: string
          description: 类型名称
        image:
          type: string
          description: 类型图标URL
        childrenList:
          type: array
          items:
            $ref: '#/components/schemas/ChildrenListVO'
          description: 子类型列表
          
    TypeDetailVO:
      type: object
      properties:
        typeId:
          type: string
          format: bigint
          description: 类型ID
        typeName:
          type: string
          description: 类型名称
        parentId:
          type: string
          format: bigint
          description: 父类型ID
        image:
          type: string
          description: 类型图标URL
        createTime:
          type: string
          description: 创建时间
        updateTime:
          type: string
          description: 更新时间
          
    TypeTreeVO:
      type: object
      properties:
        typeId:
          type: string
          format: bigint
          description: 类型ID
        typeName:
          type: string
          description: 类型名称
        image:
          type: string
          description: 类型图标URL
        childrenList:
          type: array
          items:
            $ref: '#/components/schemas/TypeTreeVO'
          description: 子类型树结构

    ChildrenVO:
      type: object
      properties:
        typeId:
          type: string
          format: bigint
          description: 类型ID
        typeName:
          type: string
          description: 类型名称
        image:
          type: string
          description: 类型图标URL
          
    ChildreGameVO:
      type: object
      properties:
        gameId:
          type: string
          format: bigint
          description: 游戏ID
        gameName:
          type: string
          description: 游戏名称
        image:
          type: string
          description: 游戏图片URL
        typeName:
          type: string
          description: 游戏类型名称

    # 控制台模块Schema定义
    DetailVO:
      type: object
      properties:
        gameId:
          type: string
          format: bigint
          description: 游戏ID
        gameName:
          type: string
          description: 游戏名称
        price:
          type: number
          format: float
          description: 游戏价格
        gameIntroduction:
          type: string
          description: 游戏介绍
        gameDate:
          type: string
          description: 发布日期
        gamePublisher:
          type: string
          description: 发行商
        typeName:
          type: string
          description: 游戏类型名称
        typeImage:
          type: string
          description: 游戏类型图标
        images:
          type: array
          items:
            type: string
          description: 游戏图片列表
        createTime:
          type: string
          description: 创建时间
        updateTime:
          type: string
          description: 更新时间
          
    GameVO:
      type: object
      properties:
        gameId:
          type: string
          format: bigint
          description: 游戏ID
        gameName:
          type: string
          description: 游戏名称
        typeId:
          type: string
          format: bigint
          description: 类型ID
        typeName:
          type: string
          description: 类型名称
        image:
          type: string
          description: 游戏图片URL
          
    ListVO:
      type: object
      properties:
        gameList:
          type: array
          items:
            $ref: '#/components/schemas/GameVO'
          description: 游戏列表
        total:
          type: integer
          description: 总记录数
        pageSize:
          type: integer
          description: 每页记录数

paths:
  # 客户端游戏接口
  # 客户端游戏类型接口
  /game/type/childrenList:
    get:
      summary: 获取子类型列表和相关游戏
      description: |
        通过父类型ID获取所有子类型列表和该类型下的游戏列表
        
        ### 示例
        ```
        GET /game/type/childrenList?typeId=1
        ```
        
        > **注意**: 该接口属于客户端接口，请使用8080端口访问
      tags:
        - 客户端类型管理
      security:
        - signAuth: []
        - signParam: []
      parameters:
        - name: typeId
          in: query
          description: 父类型ID
          required: true
          schema:
            type: string
            format: bigint
      responses:
        '200':
          description: 成功获取子类型列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  # 控制台游戏管理接口
  /game/create:
    post:
      summary: 创建游戏
      description: |
        创建新的游戏记录
        
        ### 示例
        ```
        POST /game/create
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台游戏管理
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - gameName
                - price
                - gameIntroduction
                - gameDate
                - gamePublisher
                - images
              properties:
                typeId:
                  type: string
                  format: bigint
                  description: 游戏类型ID(可选)
                gameName:
                  type: string
                  description: 游戏名称
                price:
                  type: number
                  format: float
                  description: 游戏价格
                gameIntroduction:
                  type: string
                  description: 游戏介绍
                gameDate:
                  type: string
                  description: 发行日期
                gamePublisher:
                  type: string
                  description: 发行商
                images:
                  type: string
                  description: 图片URL列表，以$分隔
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/update:
    post:
      summary: 更新游戏
      description: |
        更新现有的游戏信息
        
        ### 示例
        ```
        POST /game/update
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台游戏管理
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - gameId
                - typeId
                - gameName
                - price
                - gameIntroduction
                - gameDate
                - gamePublisher
                - images
              properties:
                gameId:
                  type: string
                  format: bigint
                  description: 游戏ID
                typeId:
                  type: string
                  format: bigint
                  description: 游戏类型ID
                gameName:
                  type: string
                  description: 游戏名称
                price:
                  type: number
                  format: float
                  description: 游戏价格
                gameIntroduction:
                  type: string
                  description: 游戏介绍
                gameDate:
                  type: string
                  description: 发行日期
                gamePublisher:
                  type: string
                  description: 发行商
                images:
                  type: string
                  description: 图片URL列表，以$分隔
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/delete:
    get:
      summary: 删除游戏
      description: |
        删除指定的游戏
        
        ### 示例
        ```
        GET /game/delete?gameId=1
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台游戏管理
      security:
        - cookieAuth: []
      parameters:
        - name: gameId
          in: query
          description: 游戏ID
          required: true
          schema:
            type: string
            format: bigint
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/info:
    get:
      summary: 获取游戏详情
      description: |
        通过游戏ID获取游戏的详细信息
        
        ### 示例
        ```
        GET /game/info?gameId=1
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台游戏管理
      security:
        - cookieAuth: []
      parameters:
        - name: gameId
          in: query
          description: 游戏ID
          required: true
          schema:
            type: string
            format: bigint
      responses:
        '200':
          description: 成功获取游戏详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/list:
    get:
      summary: 获取游戏列表
      description: |
        获取游戏列表，支持分页、关键词搜索和类型筛选
        
        ### 示例
        ```
        GET /game/list?page=1&keyword=冒险&typeId=1
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台游戏管理
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          description: 页码
          required: false
          schema:
            type: integer
            default: 1
        - name: keyword
          in: query
          description: 搜索关键词
          required: false
          schema:
            type: string
        - name: typeId
          in: query
          description: 游戏类型ID
          required: false
          schema:
            type: string
            format: bigint
      responses:
        '200':
          description: 成功获取游戏列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  # 控制台游戏类型管理接口
  /game/type/list:
    get:
      summary: 获取游戏类型列表
      description: |
        获取所有游戏类型列表，支持关键词搜索
        
        ### 示例
        ```
        GET /game/type/list
        GET /game/type/list?keyword=冒险
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台类型管理
      security:
        - cookieAuth: []
      parameters:
        - name: keyword
          in: query
          description: 搜索关键词(可选)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 成功获取游戏类型列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/type/info:
    get:
      summary: 获取游戏类型详情
      description: |
        通过类型ID获取游戏类型的详细信息
        
        ### 示例
        ```
        GET /game/type/info?typeId=1
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台类型管理
      security:
        - cookieAuth: []
      parameters:
        - name: typeId
          in: query
          description: 游戏类型ID
          required: true
          schema:
            type: string
            format: bigint
      responses:
        '200':
          description: 成功获取游戏类型详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/type/create:
    post:
      summary: 创建游戏类型
      description: |
        创建新的游戏类型
        
        ### 示例
        ```
        POST /game/type/create
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台类型管理
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - typeName
                - image
              properties:
                typeName:
                  type: string
                  description: 类型名称
                image:
                  type: string
                  description: 类型图片URL
                parentId:
                  type: string
                  format: bigint
                  description: 父类型ID(可选)
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/type/update:
    post:
      summary: 更新游戏类型
      description: |
        更新现有的游戏类型
        
        ### 示例
        ```
        POST /game/type/update
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台类型管理
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - typeId
                - typeName
                - image
              properties:
                typeId:
                  type: string
                  format: bigint
                  description: 类型ID
                typeName:
                  type: string
                  description: 类型名称
                image:
                  type: string
                  description: 类型图片URL
                parentId:
                  type: string
                  format: bigint
                  description: 父类型ID(可选)
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/type/delete:
    get:
      summary: 删除游戏类型
      description: |
        删除指定的游戏类型，如果该类型下有游戏则不允许删除
        
        ### 示例
        ```
        GET /game/type/delete?typeId=1
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台类型管理
      security:
        - cookieAuth: []
      parameters:
        - name: typeId
          in: query
          description: 游戏类型ID
          required: true
          schema:
            type: string
            format: bigint
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /game/type/tree:
    get:
      summary: 获取游戏类型树
      description: |
        获取游戏类型的树形结构，支持关键词过滤
        
        ### 示例
        ```
        GET /game/type/tree
        GET /game/type/tree?keyword=冒险
        ```
        
        > **注意**: 该接口属于控制台接口，请使用8081端口访问
      tags:
        - 控制台类型管理
      security:
        - cookieAuth: []
      parameters:
        - name: keyword
          in: query
          description: 过滤关键词(可选)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 成功获取游戏类型树
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

# 业务状态码定义
x-status-codes:
  1001:
    description: 成功
  1002:
    description: 用户未登录
  1010:
    description: 账号密码不匹配或账号不存在
  2014:
    description: 账号尚未注册
  4003:
    description: 没有权限
  4004:
    description: 链接超时

  # 用户认证接口
  /user/login/app:
    post:
      summary: 用户登录
      description: |
        用户通过手机号和密码登录系统
        
        ### 示例
        ```
        POST /user/login/app
        ```
        
        > **注意**: 该接口属于客户端接口，请使用8080端口访问
      tags:
        - 用户认证
      parameters:
        - name: phone
          in: query
          description: 手机号
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: 密码
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    enum: [1001, 1002, 1010, 4004]
                    description: |
                      业务状态码：
                      - 1001: 成功
                      - 1002: 用户未登录
                      - 1010: 账号密码不匹配或账号不存在
                      - 4004: 操作失败
                  msg:
                    type: string
                    description: 状态描述
                  data:
                    type: object
                    properties:
                      sign:
                        type: string
                        description: 用户签名令牌
                      userInfo:
                        type: object
                        properties:
                          userId:
                            type: string
                            format: bigint
                            description: 用户ID
                          name:
                            type: string
                            description: 用户名称
                          phone:
                            type: string
                            description: 手机号
                          avatar:
                            type: string
                            description: 头像URL
                          gender:
                            type: integer
                            enum: [1, 2]
                            description: 性别，1-男，2-女

  /user/register/app:
    post:
      summary: 用户注册
      description: |
        用户注册新账号
        
        ### 示例
        ```
        POST /user/register/app
        ```
        
        > **注意**: 该接口属于客户端接口，请使用8080端口访问
      tags:
        - 用户认证
      parameters:
        - name: phone
          in: query
          description: 手机号
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: 密码
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: 用户名称
          required: true
          schema:
            type: string
        - name: gender
          in: query
          description: 性别，1-男，2-女
          required: true
          schema:
            type: integer
            enum: [1, 2]
        - name: avatar
          in: query
          description: 头像URL
          required: false
          schema:
            type: string
        - name: country
          in: query
          description: 国家
          required: false
          schema:
            type: string
        - name: province
          in: query
          description: 省份
          required: false
          schema:
            type: string
        - name: city
          in: query
          description: 城市
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 注册成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    enum: [1001, 1002, 2014, 4004]
                    description: |
                      业务状态码：
                      - 1001: 成功
                      - 1002: 用户未登录
                      - 2014: 账号尚未注册
                      - 4004: 操作失败
                  msg:
                    type: string
                    description: 状态描述
                  data:
                    type: object
                    properties:
                      sign:
                        type: string
                        description: 用户签名令牌
                      userInfo:
                        type: object
                        properties:
                          userId:
                            type: string
                            format: bigint
                            description: 用户ID
                          name:
                            type: string
                            description: 用户名称
                          phone:
                            type: string
                            description: 手机号
                          avatar:
                            type: string
                            description: 头像URL
                          gender:
                            type: integer
                            enum: [1, 2]
                            description: 性别，1-男，2-女 